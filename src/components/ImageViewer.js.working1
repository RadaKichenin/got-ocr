import React, { useState, useRef, useEffect } from 'react';
import ReactCrop from 'react-image-crop'; // Removed unused convertToPixelCrop etc.
import 'react-image-crop/dist/ReactCrop.css';

const ImageViewer = ({ imageUrl, onAreaSelect }) => {
  const [crop, setCrop] = useState(); // Visual crop state (usually % units from onChange)
  const [completedPixelCrop, setCompletedPixelCrop] = useState(null); // Final PIXEL crop from onComplete
  const imgRef = useRef(null);

  console.log("ImageViewer Render - Image URL:", imageUrl, "Current Crop:", crop, "Completed Crop:", completedPixelCrop); // Log on every render

  // Reset crop when image URL changes
  useEffect(() => {
    console.log("ImageViewer: Image URL changed or component mounted. Resetting crop.");
    setCrop(undefined);
    setCompletedPixelCrop(null);
    if (onAreaSelect) {
        onAreaSelect(null);
    }
    // We only want this effect to run when imageUrl changes
  }, [imageUrl]); // Removed onAreaSelect from here for now to simplify debugging

  // Effect to calculate and propagate final coordinates *after* pixel crop completion
  useEffect(() => {
    console.log("ImageViewer: useEffect for coordinate calculation triggered. CompletedPixelCrop:", completedPixelCrop); // Log trigger

    // Guard clauses
    if (!completedPixelCrop?.width || !completedPixelCrop?.height || !imgRef.current) {
      console.log("ImageViewer: Skipping coordinate calculation - invalid crop or image ref.");
       if (onAreaSelect) {
            onAreaSelect(null); // Ensure parent is notified if crop becomes invalid
       }
      return;
    }

    const imageElement = imgRef.current;
    const { naturalWidth, naturalHeight, width: displayWidth, height: displayHeight } = imageElement;

    if (!naturalWidth || !naturalHeight || !displayWidth || !displayHeight) {
      console.error("ImageViewer: Image dimensions not available.");
       if (onAreaSelect) {
            onAreaSelect(null);
       }
      return;
    }

    console.log("ImageViewer: Calculating based on:", { naturalW: naturalWidth, naturalH: naturalHeight, displayW: displayWidth, displayH: displayHeight, crop: completedPixelCrop });

    const scaleX = naturalWidth / displayWidth;
    const scaleY = naturalHeight / displayHeight;

    const originalX1 = Math.round(completedPixelCrop.x * scaleX);
    const originalY1 = Math.round(completedPixelCrop.y * scaleY);
    const originalX2 = Math.round((completedPixelCrop.x + completedPixelCrop.width) * scaleX);
    const originalY2 = Math.round((completedPixelCrop.y + completedPixelCrop.height) * scaleY);

    const finalX1 = Math.max(0, Math.min(originalX1, naturalWidth));
    const finalY1 = Math.max(0, Math.min(originalY1, naturalHeight));
    const finalX2 = Math.max(0, Math.min(originalX2, naturalWidth));
    const finalY2 = Math.max(0, Math.min(originalY2, naturalHeight));

    if (finalX2 > finalX1 && finalY2 > finalY1) {
      const boxString = `[${finalX1},${finalY1},${finalX2},${finalY2}]`;
      console.log("***** ImageViewer: Calculated Original Coords Box:", boxString, "*****"); // Make log prominent
      if (onAreaSelect) {
          onAreaSelect(boxString);
      }
    } else {
      console.warn("ImageViewer: Calculated zero-area crop. Reporting null.");
       if (onAreaSelect) {
           onAreaSelect(null);
       }
    }
    // Depend only on the completed crop state for calculation; added onAreaSelect back carefully
  }, [completedPixelCrop, onAreaSelect]);

  // Event Handlers with Logging:
  function onImageLoad(e) {
     console.log("ImageViewer: Image loaded via onLoad event. Natural Dimensions:", { w: e.currentTarget.naturalWidth, h: e.currentTarget.naturalHeight });
     // Force a state update slightly after load if dimensions seem problematic? (Uncommon fix)
    // setTimeout(() => setCrop(undefined), 10);
  }

  const handleCropComplete = (pixelCrop) => {
      console.log("ImageViewer: handleCropComplete fired!", "Pixel Crop:", pixelCrop); // *** Check if this logs ***
      // Basic validation before setting state
      if (pixelCrop?.width > 0 && pixelCrop?.height > 0) {
           setCompletedPixelCrop(pixelCrop);
      } else {
           console.log("ImageViewer: handleCropComplete - received zero area crop, clearing completed state.");
           setCompletedPixelCrop(null); // Clear if invalid
      }
  };

  const handleCropChange = (pixelCrop, percentCrop) => {
      // console.log("ImageViewer: handleCropChange fired!", "Percent Crop:", percentCrop); // Can be noisy, uncomment if needed
      setCrop(percentCrop); // Update the visual representation
  };


  // Render logic
  if (!imageUrl) {
    return <div className="image-viewer-panel placeholder">Select a page to view.</div>;
  }

  return (
    <div className="image-viewer-panel">
      <h4>Page Viewer</h4>
      <p style={{ fontSize: '0.9em', color: '#555' }}>
         Drag on the image to select an area for OCR.
       </p>
      <div className="image-crop-container">
        {/* Conditional Rendering: Only render ReactCrop if imageUrl is valid */}
        {imageUrl ? (
             <ReactCrop
                crop={crop}
                onChange={handleCropChange}
                onComplete={handleCropComplete}
                minWidth={10}
                minHeight={10}
            >
                <img
                    ref={imgRef}
                    src={imageUrl}
                    alt="Document page for cropping"
                    style={{ display: 'block', maxHeight: '100%', maxWidth: '100%', objectFit: 'contain' }}
                    onLoad={onImageLoad} // Crucial for getting dimensions
                />
            </ReactCrop>
        ) : (
            <p>Loading image...</p> // Placeholder while URL might be loading
        )}
      </div>
    </div>
  );
};

export default ImageViewer;