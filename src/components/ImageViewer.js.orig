import React, { useState, useRef, useEffect } from 'react';
import { getImageUrl } from '../services/api';

// --- IMPORTANT ---
// This ImageViewer provides ONLY BASIC coordinate tracking on click.
// For a real drag-to-select box, you NEED a library like:
// - react-image-crop (https://github.com/DominicTobias/react-image-crop)
// - react-easy-crop (https://github.com/ricardo-ch/react-easy-crop)
// - Fabric.js (more powerful canvas library)
// Integrating these is beyond this initial setup.
// This example will just store clicked points to simulate selection.
// -----------------

const ImageViewer = ({ imageUrl, onAreaSelect }) => {
  const [startPoint, setStartPoint] = useState(null);
  const [endPoint, setEndPoint] = useState(null);
  const imageRef = useRef(null);

  useEffect(() => {
    // Reset selection when image changes
    setStartPoint(null);
    setEndPoint(null);
  }, [imageUrl]);

  const handleImageClick = (event) => {
      if (!imageRef.current) return;

      const rect = imageRef.current.getBoundingClientRect();
      // Calculate click coordinates relative to the image top-left corner
      // These are DISPLAY coordinates, not necessarily original image coordinates if scaled
      const x = Math.round(event.clientX - rect.left);
      const y = Math.round(event.clientY - rect.top);

      // Very basic logic: first click sets start, second sets end
      if (!startPoint) {
          setStartPoint({ x, y });
          setEndPoint(null); // Clear end point on new start
          console.log("Set start point:", { x, y });
      } else {
          setEndPoint({ x, y });
          console.log("Set end point:", { x, y });

          // --- Coordinate Conversion Placeholder ---
          // PROBLEM: These x,y are relative to the *displayed* image size.
          // The OCR service needs coordinates relative to the *original* image dimensions.
          // You need to calculate the scaling factor.
          const displayWidth = imageRef.current.clientWidth;
          const displayHeight = imageRef.current.clientHeight;
          const naturalWidth = imageRef.current.naturalWidth; // Original width
          const naturalHeight = imageRef.current.naturalHeight; // Original height

          if (!naturalWidth || !naturalHeight) {
            console.error("Cannot get natural image dimensions.");
            onAreaSelect(null); // Indicate failure
            return;
          }

          const scaleX = naturalWidth / displayWidth;
          const scaleY = naturalHeight / displayHeight;

          // Ensure x1 < x2 and y1 < y2
          const x1 = Math.min(startPoint.x, x);
          const y1 = Math.min(startPoint.y, y);
          const x2 = Math.max(startPoint.x, x);
          const y2 = Math.max(startPoint.y, y);

          // Scale coordinates to original image dimensions
          const originalX1 = Math.round(x1 * scaleX);
          const originalY1 = Math.round(y1 * scaleY);
          const originalX2 = Math.round(x2 * scaleX);
          const originalY2 = Math.round(y2 * scaleY);

          const boxString = `[${originalX1},${originalY1},${originalX2},${originalY2}]`;
          console.log("Calculated Original Coords Box:", boxString);
          onAreaSelect(boxString); // Pass the formatted string

          // Reset for next selection? Or keep visually?
           setStartPoint(null);
           setEndPoint(null);
      }
  };

  if (!imageUrl) {
    return <div className="image-viewer-panel placeholder">Select a page to view.</div>;
  }

  // Basic styling to show selection points
  const selectionStyle = {
      position: 'absolute',
      border: '2px dashed red',
      backgroundColor: 'rgba(255, 0, 0, 0.2)',
      left: startPoint && endPoint ? `${Math.min(startPoint.x, endPoint.x)}px` : (startPoint ? `${startPoint.x - 2}px` : '0px'),
      top: startPoint && endPoint ? `${Math.min(startPoint.y, endPoint.y)}px` : (startPoint ? `${startPoint.y - 2}px` : '0px'),
      width: startPoint && endPoint ? `${Math.abs(endPoint.x - startPoint.x)}px` : (startPoint ? '4px' : '0px'),
      height: startPoint && endPoint ? `${Math.abs(endPoint.y - startPoint.y)}px` : (startPoint ? '4px' : '0px'),
      pointerEvents: 'none', // Allow clicking through the overlay
  };

  return (
    <div className="image-viewer-panel">
      <h4>Page Viewer</h4>
       <p style={{ color: 'orange', fontWeight: 'bold' }}>
         (Note: Click twice to define area corners. Real drag-select requires a library like react-image-crop.)
       </p>
      <div className="image-container" style={{ position: 'relative', maxWidth: '100%', overflow: 'auto' }}>
        <img
          ref={imageRef}
          src={imageUrl}
          alt="Document page"
          onClick={handleImageClick}
          style={{ display: 'block', maxWidth: '100%', cursor: 'crosshair' }}
        />
        {/* Visual feedback for selection - basic */}
        {(startPoint || endPoint) && <div style={selectionStyle}></div>}
      </div>
    </div>
  );
};

export default ImageViewer;