import React, { useState, useRef, useEffect } from 'react';
import ReactCrop from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';

const ImageViewer = ({ imageUrl, onAreaSelect }) => {
    const [crop, setCrop] = useState(); // Visual crop state
    const [completedPixelCrop, setCompletedPixelCrop] = useState(null); // Final PIXEL crop
    const imgRef = useRef(null); // Ref to <img>

    // Effect 1: Reset state when the image source changes
    useEffect(() => {
        console.log("ImageViewer: Image URL changed/mounted. Resetting crop state.");
        setCrop(undefined);
        setCompletedPixelCrop(null);
        if (onAreaSelect) onAreaSelect(null);
        // Dependency: imageUrl only, as established in your working version
    }, [imageUrl]);

    // --- Effect 2: Calculate Coordinates (with object-fit correction) ---
    useEffect(() => {
        console.log("ImageViewer: useEffect for coordinate calculation triggered. CompletedPixelCrop:", completedPixelCrop);

        // Guard clauses for valid crop and image ref
        if (!completedPixelCrop?.width || !completedPixelCrop?.height || !imgRef.current) {
            console.log("ImageViewer: Skipping coordinate calculation - invalid crop or image ref.");
            // Ensure parent is notified if crop becomes invalid after being valid
            if (completedPixelCrop === null && onAreaSelect) onAreaSelect(null);
            return;
        }

        const imageElement = imgRef.current;
        const { naturalWidth, naturalHeight, width: displayWidth, height: displayHeight } = imageElement;

        console.log(`ImageViewer: -- Dimensions Check --
            Natural W: ${naturalWidth}, Natural H: ${naturalHeight}
            Displayed W: ${displayWidth}, Displayed H: ${displayHeight}
            Pixel Crop (Input): x=${completedPixelCrop.x?.toFixed(0)}, y=${completedPixelCrop.y?.toFixed(0)}, w=${completedPixelCrop.width?.toFixed(0)}, h=${completedPixelCrop.height?.toFixed(0)}`);

        // Guard clause for valid dimensions
        if (!naturalWidth || !naturalHeight || !displayWidth || !displayHeight || displayWidth <= 0 || displayHeight <= 0) {
            console.error("ImageViewer: Invalid image dimensions detected for calculation.");
            if (onAreaSelect) onAreaSelect(null);
            return;
        }

        // --- *** START: object-fit: contain Calculation *** ---
        const naturalAspect = naturalWidth / naturalHeight;
        const displayAspect = displayWidth / displayHeight;

        let visualWidth = displayWidth;
        let visualHeight = displayHeight;
        let offsetX = 0;
        let offsetY = 0;

        if (naturalAspect > displayAspect) { // Image wider than container -> letterbox top/bottom
            visualHeight = displayWidth / naturalAspect;
            offsetY = (displayHeight - visualHeight) / 2;
        } else if (naturalAspect < displayAspect) { // Image taller than container -> letterbox left/right
            visualWidth = displayHeight * naturalAspect;
            offsetX = (displayWidth - visualWidth) / 2;
        }
         // If aspect ratios match, visual dimensions = display dimensions, offsets = 0

        console.log(`ImageViewer: Calculated Visual/Offset: visualW=${visualWidth.toFixed(2)}, visualH=${visualHeight.toFixed(2)}, offsetX=${offsetX.toFixed(2)}, offsetY=${offsetY.toFixed(2)}`);

        // Adjust crop coordinates relative to the visual content's top-left
        const adjustedCropX = Math.max(0, completedPixelCrop.x - offsetX);
        const adjustedCropY = Math.max(0, completedPixelCrop.y - offsetY);
        // Clamp width/height adjustment based on visual bounds starting from adjusted pos
        const adjustedCropW = Math.min(completedPixelCrop.width, Math.max(0, visualWidth - adjustedCropX));
        const adjustedCropH = Math.min(completedPixelCrop.height, Math.max(0, visualHeight - adjustedCropY));

         // Guard clause for valid visual dimensions needed for scaling
         if (visualWidth <= 0 || visualHeight <= 0) {
            console.error("ImageViewer: Calculated zero visual dimensions, cannot scale.");
             if (onAreaSelect) onAreaSelect(null);
            return;
         }

        // Calculate scaling factors based on VISUAL dimensions
        const scaleX = naturalWidth / visualWidth;
        const scaleY = naturalHeight / visualHeight;
        // --- *** END: object-fit: contain Calculation *** ---

        console.log(`ImageViewer: Final Scale factors (based on visual): scaleX=${scaleX.toFixed(4)}, scaleY=${scaleY.toFixed(4)}`);

        // Scale the ADJUSTED crop coordinates
        const originalX1 = adjustedCropX * scaleX;
        const originalY1 = adjustedCropY * scaleY;
        const originalX2 = (adjustedCropX + adjustedCropW) * scaleX; // Use adjusted width
        const originalY2 = (adjustedCropY + adjustedCropH) * scaleY; // Use adjusted height
        console.log(`ImageViewer: Scaled ADJUSTED Coords (float): x1=${originalX1.toFixed(2)}, y1=${originalY1.toFixed(2)}, x2=${originalX2.toFixed(2)}, y2=${originalY2.toFixed(2)}`);


        // Round final coordinates
        const finalX1 = Math.round(originalX1);
        const finalY1 = Math.round(originalY1);
        const finalX2 = Math.round(originalX2);
        const finalY2 = Math.round(originalY2);

        // Clamp final coordinates to natural image bounds
        const clampedX1 = Math.max(0, Math.min(finalX1, naturalWidth));
        const clampedY1 = Math.max(0, Math.min(finalY1, naturalHeight));
        const clampedX2 = Math.max(0, Math.min(finalX2, naturalWidth));
        const clampedY2 = Math.max(0, Math.min(finalY2, naturalHeight));
        console.log(`ImageViewer: Final Rounded & Clamped Coords: x1=${clampedX1}, y1=${clampedY1}, x2=${clampedX2}, y2=${clampedY2}`);


        // Propagate results if area is valid
        if (clampedX2 > clampedX1 && clampedY2 > clampedY1) {
            const boxString = `[${clampedX1},${clampedY1},${clampedX2},${clampedY2}]`;
            console.log("***** ImageViewer: Calculated Original Coords Box:", boxString, "*****");
            if (onAreaSelect) onAreaSelect(boxString);
        } else {
            console.warn("ImageViewer: Calculated zero-area crop. Reporting null.");
            if (onAreaSelect) onAreaSelect(null);
        }

        // Dependencies: completedPixelCrop and onAreaSelect as per original working version
    }, [completedPixelCrop, onAreaSelect]);

    // --- Event Handlers (Keep these as they were in your working version) ---
    function onImageLoad(e) {
        console.log("ImageViewer: Image loaded via onLoad event. Natural Dimensions:", { w: e.currentTarget.naturalWidth, h: e.currentTarget.naturalHeight });
    }

    const handleCropComplete = (pixelCrop) => {
        console.log("ImageViewer: handleCropComplete fired!", "Pixel Crop:", pixelCrop);
        if (pixelCrop?.width > 0 && pixelCrop?.height > 0) {
            setCompletedPixelCrop(pixelCrop);
        } else {
            console.log("ImageViewer: handleCropComplete - zero area crop, clearing completed state.");
            setCompletedPixelCrop(null);
        }
    };

    const handleCropChange = (pixelCrop, percentCrop) => {
        setCrop(percentCrop); // Update visual representation using percentage
    };


    // --- Render Logic (Keep as it was in your working version) ---
    if (!imageUrl) {
        return <div className="image-viewer-panel placeholder">Select a page to view.</div>;
    }

    return (
        <div className="image-viewer-panel">
            <h4>Page Viewer</h4>
            <p style={{ fontSize: '0.9em', color: '#555' }}>
                Drag on the image to select an area for OCR.
            </p>
            <div className="image-crop-container">
                {imageUrl ? (
                    <ReactCrop
                        crop={crop}
                        onChange={handleCropChange}
                        onComplete={handleCropComplete}
                        minWidth={10}
                        minHeight={10}
                    >
                        <img
                            ref={imgRef}
                            src={imageUrl}
                            alt="Document page for cropping"
                            style={{ display: 'block', maxHeight: '100%', maxWidth: '100%', objectFit: 'contain' }}
                            onLoad={onImageLoad}
                        />
                    </ReactCrop>
                ) : (
                    <p>Loading image...</p>
                )}
            </div>
        </div>
    );
};

export default ImageViewer;